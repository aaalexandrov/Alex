def IF(#c, #op): if (#c) #op [
       bool cond() {
               return #c
       }
       ret block() {
               return #op
       }
       ret execute() {
               if (cond())
                       return block()
               return false
       }
]

def EXECIFPRESENT(#op) [
       if (present(#op)) return (#op | true)
       else return false
]

def BLOCK(#op1, #rest): { #op1; #rest } [
       if (EXECIFPRESENT(#op1)) BLOCK(#rest)
]

def IFELSE(#c, #op1, #op2): if(#c) #op1 else #op2 [
       {
               var c
               if (c = #c) #op1
               if (!c) #op2
       }
]

def WHILE(#c, #op): while(#c) #op [
       if (#c) { #op; WHILE(#c, #op) }
]

def FOR(#init, #c, #inc, #op): for(#init; #c; #inc) #op [
       {
               #init;
               while(#c) {
                       #op;
                       #inc
               }
       }
]

-------------------------------------------------------------------------------

Constant ::= "true" | "false" | String | Number | Table
Variable ::= Identifier
Call ::= ( Variable | FunctionDef ) "(" [ ExpressionList ] ")" { "(" [ ExpressionList ] ")" }
Indexable ::= Call | Variable | "(" Expression ")" 
Index ::= "[" Expression "]"
Operand ::= Constant | ( Indexable { Index } )
Power ::= Operand [ "^" Power ]
Mult ::= Power { ("*" | "/") Power }
Sum ::= ["+" | "-"] Mult { ("+" | "-") Mult }

Comparison ::= Sum [ ("==" | "~=" | "<" | ">" | "<=" | ">=") Sum ]
Not ::= [ "not" ] Comparison
And ::= Not { "and" Not }
Or ::= And { "or" And }

TableKey = Identifier | Constant
TableValue = [ TableKey "=" ] Expression
Table ::= "{" [ TableValue { "," TableValue } [ "," ] ] "}"

FunctionDef ::= "function" "(" [ Identifier { "," Identifier } ] ")" { Operator } "end"
Expression ::= Or | FunctionDef
ExpressionList ::= Expression { "," Expression }

LValue ::= ( Indexable Index { Index } ) | Variable
Assignment ::= LValue { "," LValue } "=" ExpressionList

Return ::= "return" [ ExpressionList ]
If ::= "if" Expression "then" { Operator } [ "else" { Operator } ] "end"
While ::= "while" Expression "do" { Operator } "end"

Operator ::= If | Return | Assignment | Call
