- Lexical closures
- Non-constant upvalues
- Co-routines
- Object-type function calls (t:m(p))
- Compiled fragment saving / loading
- Compiled code optimizer

- For loops
- Break keyword to abort loop execution
- Tail function calls
- Function result forwarding for multiple returns
- Variable number of arguments

- Make the frontend dump the return values from top level executed fragments
- Core function library

- Track allocated memory through adding / subtracting value sizes as values are added / removed from the interpreter's CValueRegistry, and not through allocator?
- Make the garbage collection incremental
- Error reporting & recovery - output diagnostic messages on parsing / execution error, and try to recover parsing after first error
- Grammar post-parsing transform pass
- Grammar optimizer

- Automatic function execution parallelism


+ Fix Parse::Float2Str to work properly with large values
+ Non-stack based instruction set
+ Multiple return value rules for expressions
+ Real local variables / scoping
+ nil value
+ String concatenation operator
+ Script to native code calls
+ Native code to script calls
+ Iteration
+ Garbage collection
+ Struct-type table element accessors (.field)
+ Track allocated memory through allocator
+ Make garbage collector also traverse the values in the current execution's call stack as they are reachable
+ Trigger garbage collection when used memory doubles
+ Number of elements in table - length() function
+ String length/element access operations - length() and substr(str, start, len)
+ Do blocks


-------------------------------------------------------------------------------

Constant ::= "nil" | "true" | "false" | STRING | NUMBER | TABLE
Variable ::= IDENTIFIER
ParamList ::= "(" [ ExpressionList ] ")"
Call ::= ( Variable { Index } | FunctionDef ) ParamList { { Index } ParamList }
Indexable ::= Call | Variable | "(" Expression ")"
DotIndex ::= "." IDENTIFIER
Index ::= ( "[" Expression "]" ) | DotIndex
Operand ::= Constant | ( Indexable { Index } )
Power ::= Operand [ "^" Power ]
Mult ::= Power { ( "*" | "/" ) Power }
Sum ::= ["+" | "-"] Mult { ( "+" | "-" ) Mult }
Concat ::= Sum { ".." Sum }

Comparison ::= Concat [ ("==" | "~=" | "<" | ">" | "<=" | ">=") Concat ]
Not ::= { "not" } Comparison
And ::= Not { "and" Not }
Or ::= And { "or" And }

TableKey = IDENTIFIER | Constant
TableValue = [ TableKey "=" ] Expression
Table ::= "{" [ TableValue { "," TableValue } [ "," ] ] "}"

IdentifierList ::= IDENTIFIER { "," IDENTIFIER }
FunctionDef ::= "function" "(" [ IdentifierList ] ")" { Operator } "end"
Expression ::= Or | FunctionDef
ExpressionList ::= Expression { "," Expression }

Locals ::= "local" IdentifierList [ "=" ExpressionList ]
LValue ::= ( Indexable Index { Index } ) | Variable
Assignment ::= LValue { "," LValue } "=" ExpressionList

Return ::= "return" [ ExpressionList ]
If ::= "if" Expression "then" { Operator } [ "else" { Operator } ] "end"
While ::= "while" Expression "do" { Operator } "end"
Do ::= "do" { Operator } "end"
For ::= "for" ( ( IDENTIFIER "," IDENTIFIER "=" Expression ) | ( IDENTIFIER "=" Expression "," Expression [ "," Expression ] ) ) "do" { Operator } "end"

Operator ::= Do | While | If | Return | Locals | Assignment | Call

Program ::= { Operator }
