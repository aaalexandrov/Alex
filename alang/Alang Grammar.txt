MODULE := module IDENTIFIER DEFINITION* end

DEFINITION := DEF_VALUE | DEF_FUNC | IMPORT | MODULE

IMPORT := import QUALIFIED_NAME ("," QUALIFIED_NAME)*
QUALIFIED_NAME := IDENTIFIER DOT_IDENTIFIER*
DOT_IDENTIFIER := "." IDENTIFIER

DEF_VALUE := (const | var) IDENTIFIER ":" TYPE [EQ_EXPRESSION]
EQ_EXPRESSION := "=" EXPRESSION

TYPE := QUALIFIED_NAME

DEF_FUNC := func IDENTIFIER "(" [DEF_PARAM ("," DEF_PARAM)*] ")" [":" TYPE] OPERATOR* end
DEF_PARAM := IDENTIFIER ":" TYPE

OPERATOR := DEF_VALUE | IF | WHILE | RETURN | ASSIGN_OR_CALL

IF := if EXPRESSION OPERATOR* [else OPERATOR*] end
WHILE := while EXPRESSION OPERATOR* end
RETURN := return [EXPRESSION]
ASSIGN_OR_CALL := IDENTIFIER ASSIGN_OR_CALL_TAIL
ASSIGN_OR_CALL_TAIL := EQ_EXPRESSION | (DOT_IDENTIFIER ASSIGN_OR_CALL_TAIL) | (INDEX ASSIGN_OR_CALL_TAIL) | (CALL_ARGUMENTS [ASSIGN_OR_CALL_TAIL])
INDEX := "[" EXPRESSION_LIST "]"
CALL_ARGUMENTS := "(" EXPRESSION_LIST ")"

EXPRESSION := COMPARISON

COMPARISON := NEGATION [("==" | "!=" | "<" | ">" | "<=" | ">=") NEGATION]
NEGATION := ("!" VALUE) | ADDITION
ADDITION := [("+" | "-")] MULTIPLICATION (("+" | "-") MULTIPLICATION)*
MULTIPLICATION := POWER (("*" | "/" | "%") POWER)*
POWER := VALUE ("^" VALUE)
VALUE := LITERAL | ("(" EXPRESSION ")") | (IDENTIFIER (DOT_IDENTIFIER | INDEX | CALL_ARGUMENTS)*)
EXPRESSION_LIST := EXPRESSION ("," EXPRESSION)

