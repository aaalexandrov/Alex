MODULE := module IDENTIFIER DEFINITION* end

DEFINITION := DEF_VALUE | DEF_FUNC | IMPORT | MODULE

IMPORT := import QUALIFIED_NAME ("," QUALIFIED_NAME)*
QUALIFIED_NAME := IDENTIFIER ("." IDENTIFIER)

DEF_VALUE := (const | var) IDENTIFIER ":" TYPE ["=" EXPRESSION]

TYPE = QUALIFIED_NAME

DEF_FUNC := func IDENTIFIER "(" [DEF_PARAM ("," DEF_PARAM)*] ")" [":" TYPE] OPERATOR* end
DEF_PARAM := IDENTIFIER ":" TYPE

OPERATOR := DEF_VALUE | IF | WHILE | RETURN | ASSIGN_OR_CALL

IF := if EXPRESSION OPERATOR* [else OPERATOR*] end
WHILE := while EXPRESSION OPERATOR* end
ASSIGN_OR_CALL := EXPRESSION ["=" EXPRESSION]
RETURN := return EXPRESSION

EXPRESSION := COMPARISON

COMPARISON := NEGATION [("==" | "!=" | "<" | ">" | "<=" | ">=") NEGATION]
NEGATION := ("!" VALUE) | ADDITION
ADDITION := [("+" | "-")] MULTIPLICATION (("+" | "-") MULTIPLICATION)*
MULTIPLICATION := POWER (("*" | "/" | "%") POWER)*
POWER := VALUE ("^" VALUE)
VALUE := LITERAL | ((IDENTIFIER | ("(" EXPRESSION ")")) (("." IDENTIFIER) | ("[" EXPRESSION_LIST "]") | ("(" EXPRESSION_LIST ")"))*)
EXPRESSION_LIST := EXPRESSION ("," EXPRESSION)