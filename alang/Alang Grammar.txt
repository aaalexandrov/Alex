MODULE := module QUALIFIED_NAME DEFINITION* end

DEFINITION := DEF_VALUE | DEF_FUNC | IMPORT | MODULE

IMPORT := import QUALIFIED_NAME ("," QUALIFIED_NAME)*
QUALIFIED_NAME := IDENTIFIER ("." IDENTIFIER)*

DEF_VALUE := DEF_CONST | DEF_VAR
DEF_CONST := const IDENTIFIER ":" TYPE INITIALIZE
DEF_VAR := var IDENTIFIER ":" TYPE [INITIALIZE]
INITIALIZE := "=" EXPRESSION

TYPE := QUALIFIED_NAME [GENERIC_PARAMS]
GENERIC_PARAMS := "{" EXPRESSION_LIST "}"

DEF_FUNC := func IDENTIFIER "(" [DEF_PARAM ("," DEF_PARAM)*] ")" [":" TYPE] OPERATOR* end
DEF_PARAM := IDENTIFIER ":" TYPE

OPERATOR := DEF_VALUE | IF | WHILE | RETURN | ASSIGN_OR_CALL

IF := if EXPRESSION OPERATOR* [else OPERATOR*] end
WHILE := while EXPRESSION OPERATOR* end
RETURN := return [EXPRESSION]
ASSIGN := "=" EXPRESSION
ASSIGN_OR_CALL := VALUE_BASE ASSIGN_OR_CALL_TAIL
ASSIGN_OR_CALL_TAIL := ASSIGN | (SUBSCRIPTS ASSIGN_OR_CALL_TAIL) | (INDEX ASSIGN_OR_CALL_TAIL) | (CALL [ASSIGN_OR_CALL_TAIL])
INDEX := "[" EXPRESSION_LIST "]"
CALL := "(" EXPRESSION_LIST ")"

EXPRESSION := LOGIC_OP

LOGIC_OP = COMPARISON (("&&" | "||") COMPARISON)*
COMPARISON := NOT [("==" | "!=" | "<" | ">" | "<=" | ">=") NOT]
NOT := ["!"] ADDITION
ADDITION := MULTIPLICATION (("+" | "-") MULTIPLICATION)*
MULTIPLICATION := POWER (("*" | "/" | "%") POWER)*
POWER := SIGNED ("^" SIGNED)
SIGNED := ["+" | "-"] VALUE
VALUE := LITERAL | (VALUE_BASE (SUBSCRIPT | INDEX | CALL)*)
VALUE_BASE := "&"* (("(" EXPRESSION ")") | IDENTIFIER)
EXPRESSION_LIST := EXPRESSION ("," EXPRESSION)*

