#version 450

struct DirectionalLight {
    vec3 dir;
    vec3 color;
    vec3 ambient;
};

struct MaterialData {
    vec3 albedo;
    float power;
};

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout (set = 0, binding = 0, std140) uniform UniformData {
    mat4 view_proj;
    vec4 background_color;
    vec3 camera_pos;
    uint num_tri_indices;
    uint num_vertices;
    uint num_bvh_nodes;
    uint num_materials;
    uint num_model_instances;
    uint num_model_nodes;
    DirectionalLight sun;
};

layout (set = 0, binding = 1, rgba8) uniform image2D Output;

layout (set = 0, binding = 2, std430) buffer Positions {
    float vert_pos[];
};

layout (set = 0, binding = 3, std430) buffer Normals {
    float vert_norm[];
};

layout (set = 0, binding = 4, std430) buffer TriIndices {
    uint tri_indices[];
};

struct TreeNode {
    vec3 box_min; 
    uint content_start;
    vec3 box_max;
    uint content_end;
    uint child[2];
    uint _pad[2];
};

layout(set = 0, binding = 5, std430) buffer BvhNodes {
    TreeNode bvh_nodes[];
};

layout(set = 0, binding = 6, std430) buffer Materials {
    MaterialData materials[];
};

layout(set = 0, binding = 7, std430) buffer TriangleMaterials {
    uint tri_material_indices[];
};

struct ModelInstance {
    vec3 box_min;
    uint bvh_start;
    vec3 box_max;
    uint bvh_end;
    mat4 transform;
    mat4 inv_transform;
};

layout (set = 0, binding = 8, std430) buffer ModelInstances {
    ModelInstance model_instances[];
};

layout (set = 0, binding = 9, std430) buffer ModelNodes {
    TreeNode model_nodes[];
};

const float inf = 1.0 / 0.0;

struct Ray {
    vec3 o;
    vec3 d;
};

struct Box {
    vec3 min;
    vec3 max;
};

uint max_elem_index(vec3 v) {
    uint ind = 2;
    if (v.x >= v.y) {
        if (v.x >= v.z) {
            ind = 0;
        } 
    } else {
        if (v.y >= v.z) {
            ind = 1;
        } 
    }
    return ind;
}

vec2 intersect_box(Box box, Ray r) {
    float t0 = -inf, t1 = inf;
    for (uint dim = 0; dim < 3; ++dim) {
        float d = r.d[dim];
        float o = r.o[dim];
        float bmin = box.min[dim];
        float bmax = box.max[dim];
        if (abs(d) < 1e-5) {
            if (o < bmin || bmax < o)
                return vec2(1, -1);
            continue;
        }

        float x0 = (bmin - o) / d;
        float x1 = (bmax - o) / d;
        t0 = max(t0, d > 0 ? x0 : x1);
        t1 = min(t1, d > 0 ? x1 : x0);
        if (t0 > t1)
            break;
    }
    return vec2(t0, t1);
}

Box box_from_tri(vec3 tri[3]) {
    Box box;
    box.min = box.max = tri[0];
    for (int i = 1; i < 3; ++i) {
        box.min = min(box.min, tri[i]);
        box.max = max(box.max, tri[i]);
    }
    return box;
}

vec3 bary(vec3 v0, vec3 v1, vec3 v2, vec3 p) {
    vec3 e1 = v1 - v0;
    vec3 e2 = v2 - v0;
    vec3 p0 = p - v0;

    float d11 = dot(e1, e1);
    float d12 = dot(e1, e2);
    float d22 = dot(e2, e2);
    float dp1 = dot(p0, e1);
    float dp2 = dot(p0, e2);
    float inv_denom = 1 / (d11 * d22 - d12 * d12);
    float c1 = (d22 * dp1 - d12 * dp2) * inv_denom;
    float c2 = (d11 * dp2 - d12 * dp1) * inv_denom;

    vec3 bc = vec3(1 - c1 - c2, c1, c2);
    return bc;
}

vec4 intersect(vec3 v0, vec3 v1, vec3 v2, Ray r) {
    vec3 e1 = v1 - v0;
    vec3 e2 = v2 - v0;
    vec3 n = cross(e1, e2);
    float nd = dot(n, r.d);
    if (abs(nd) < 1e-5)
        return vec4(-1);
    float t = dot(n, v0 - r.o) / nd;

    vec3 p = r.o+t*r.d;
    vec3 bc = bary(v0, v1, v2, p);

    return vec4(bc, t);
}

Ray transform_ray(Ray r, mat4 affine) {
    return Ray(
        (affine * vec4(r.o, 1)).xyz, 
        normalize((affine * vec4(r.d, 0)).xyz));
}

vec3 get_position(uint index) {
    return vec3(
        vert_pos[index * 3 + 0],
        vert_pos[index * 3 + 1],
        vert_pos[index * 3 + 2]);
}

vec3[3] get_tri(uint tri_index_index) {
    uint i = tri_index_index * 3;
    vec3 v[3];
    v[0] = get_position(tri_indices[i + 0]);
    v[1] = get_position(tri_indices[i + 1]);
    v[2] = get_position(tri_indices[i + 2]);
    return v;
}

vec3 get_normal(uint index) {
    return vec3(
        vert_norm[index * 3 + 0],
        vert_norm[index * 3 + 1],
        vert_norm[index * 3 + 2]);
}

vec3 get_interpolated_normal(uint tri_index_index, vec3 bc) {
    uint i = tri_index_index * 3;
    vec3 norm = 
        bc[0] * get_normal(tri_indices[i + 0]) +
        bc[1] * get_normal(tri_indices[i + 1]) +
        bc[2] * get_normal(tri_indices[i + 2]);
    return norm;
}

vec4 intersect_tri(uint tri_index_index, Ray r) {
    vec3 v[3] = get_tri(tri_index_index);
    vec4 bc_tri = intersect(v[0], v[1], v[2], r);
    return bc_tri;    
}

bool get_bvh_intersection(uint start_node_index, Ray r, out vec4 bc, out uint tri_ind)
{
    bc = vec4(-1, -1, -1, inf);
    tri_ind = ~0;
    
    uint num_node_indices = 1;
    uint node_indices[32];
    node_indices[0] = start_node_index;

    while (num_node_indices > 0) {
        uint b = node_indices[--num_node_indices];

        TreeNode node = bvh_nodes[b];
        {
            vec2 ray_int = intersect_box(Box(node.box_min, node.box_max), r);
            if (ray_int[0] > ray_int[1] || ray_int[1] < 0 || ray_int[0] >= bc.w)
                continue;
        }

        for (uint t = node.content_start; t < node.content_end; ++t) {
            vec4 bc_tri = intersect_tri(t, r);
            if (all(greaterThanEqual(bc_tri, vec4(0.0))) && bc_tri.w < bc.w) {
                bc = bc_tri;
                tri_ind = t;
            }
        }

        uint valid_children = 0;
        for (uint c = 0; c < 2; ++c) {
            if (node.child[c] > num_bvh_nodes)
                continue;
            node_indices[num_node_indices++] = node.child[c];
            ++valid_children;
        }

        if (valid_children == 2) {
            // the child that is closer to the ray origin should be last on the stack so it's processed before the more distant one
            uint split_dim = max_elem_index(node.box_max - node.box_min);
            if (r.d[split_dim] > 0) {
                uint t = node_indices[num_node_indices - 2];
                node_indices[num_node_indices - 2] = node_indices[num_node_indices - 1];
                node_indices[num_node_indices - 1] = t;
            }
        }
    }

    return all(greaterThanEqual(bc, vec4(0.0)));
}

bool intersect_model_instance(Ray r, uint model_instance_index, float min_int, out vec4 bc, out uint tri_ind) {
    ModelInstance model = model_instances[model_instance_index];
    vec2 ray_int = intersect_box(Box(model.box_min, model.box_max), r);
    if (ray_int[0] > ray_int[1] || ray_int[1] < 0 || ray_int[0] >= min_int)
        return false;

    Ray model_ray = transform_ray(r, model.inv_transform);
    if (!get_bvh_intersection(model.bvh_start, model_ray, bc, tri_ind))
        return false;
    return bc.w < min_int;
}

bool get_tri_intersection(Ray r, out vec4 bc, out uint tri_ind, out uint model_instance_index) {
    bc = vec4(-1, -1, -1, inf);
    tri_ind = ~0;
    model_instance_index = ~0;
    
    uint num_node_indices = 1;
    uint node_indices[32];
    node_indices[0] = 0;

    while (num_node_indices > 0) {
        uint b = node_indices[--num_node_indices];

        TreeNode node = model_nodes[b];
        {
            vec2 ray_int = intersect_box(Box(node.box_min, node.box_max), r);
            if (ray_int[0] > ray_int[1] || ray_int[1] < 0 || ray_int[0] >= bc.w)
                continue;
        }

        for (uint m = node.content_start; m < node.content_end; ++m) {
            vec4 bc_model;
            uint tri_ind_model;
            if (intersect_model_instance(r, m, bc.w, bc_model, tri_ind_model)) {
                bc = bc_model;
                tri_ind = tri_ind_model;
                model_instance_index = m;
            }
        }

        uint valid_children = 0;
        for (uint c = 0; c < 2; ++c) {
            if (node.child[c] > num_model_nodes)
                continue;
            node_indices[num_node_indices++] = node.child[c];
            ++valid_children;
        }

        if (valid_children == 2) {
            // the child that is closer to the ray origin should be last on the stack so it's processed before the more distant one
            uint split_dim = max_elem_index(node.box_max - node.box_min);
            if (r.d[split_dim] > 0) {
                uint t = node_indices[num_node_indices - 2];
                node_indices[num_node_indices - 2] = node_indices[num_node_indices - 1];
                node_indices[num_node_indices - 1] = t;
            }
        }
    }

    return all(greaterThanEqual(bc, vec4(0.0)));
}

vec3 GetLighting(vec3 cam_pos, vec3 pos, vec3 normal, float hit_dist, DirectionalLight dir_light, MaterialData material) {
    vec3 V = normalize(cam_pos - pos);
    float NdotL = max(0, dot(normal, dir_light.dir));

    if (NdotL > 0) {
        uint tri_ind, model_inst_ind;
        vec4 bc;
        Ray rShadow;
        rShadow.o = pos + dir_light.dir * hit_dist * 1e-4;
        rShadow.d = dir_light.dir;
        bool shadow = get_tri_intersection(rShadow, bc, tri_ind, model_inst_ind);
        if (shadow)
            NdotL = 0;
    }

    vec3 diffuse = NdotL * material.albedo;
    vec3 H = normalize(dir_light.dir + V);
    float spec = pow(max(0, dot(normal, H)), material.power) * float(NdotL > 0);
    vec3 color = (diffuse + spec) * dir_light.color + dir_light.ambient;
    return color;
}

void main() {
    ivec2 pixCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 outputSize = imageSize(Output);

    vec2 pix = vec2(pixCoord) / outputSize * 2 - 1;

    vec4 o = view_proj * vec4(pix, 0, 1);
    vec4 p = view_proj * vec4(pix, 0.5, 1);
    o /= o.w;
    p /= p.w;

    Ray r;
    r.o = o.xyz;
    r.d = normalize((p - o).xyz);

    vec4 bc;
    uint tri_ind, model_inst_ind;

    vec4 color = background_color;
    if (get_tri_intersection(r, bc, tri_ind, model_inst_ind)) {
        vec3 pos = r.o + bc.w * r.d;
        vec3 tri[3] = get_tri(tri_ind);
        //vec3 norm = normalize(cross(tri[0] - tri[1], tri[2] - tri[0]));
        vec3 norm = normalize(get_interpolated_normal(tri_ind, bc.xyz));
        ModelInstance model_inst = model_instances[model_inst_ind];
        norm = (model_inst.transform * vec4(norm, 0)).xyz;
        MaterialData mat = materials[tri_material_indices[tri_ind]];
        color.xyz = GetLighting(camera_pos, pos, norm, bc.w, sun, mat);
    }

    imageStore(Output, pixCoord, color);
}
