#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, std140) uniform Data {
    vec4 pix_value;
};

layout(set = 0, binding = 1, rgba8) uniform image2D Output;

layout(set = 0, binding = 2, std430) buffer Vectices {
    vec4 vert[];
};

layout(set = 0, binding = 3, std430) buffer TriIndices {
    uint tri_indices[];
};

struct Ray {
    vec3 o;
    vec3 d;
};

vec3 bary(vec3 v0, vec3 v1, vec3 v2, vec3 p) {
    vec3 e1 = v1 - v0;
    vec3 e2 = v2 - v0;
    vec3 p0 = p - v0;

    float e1proje2 = dot(e1, e2) / dot(e2, e2); 
    vec3 e1o = e1 - e1proje2 * e2;

    float t1o = dot(p0, e1o) / dot(e1o, e1o);
    float t2 = dot(p0, e2) / dot(e2, e2);

    float c1 = t1o;
    float c2 = t2 - t1o*e1proje2;

    vec3 bc = vec3(1 - c1 - c2, c1, c2);
    return bc;
}

vec4 intersect(vec3 v0, vec3 v1, vec3 v2, Ray r) {
    vec3 e1 = v1 - v0;
    vec3 e2 = v2 - v0;
    vec3 n = cross(e1, e2);
    float nd = dot(n, r.d);
    if (abs(nd) < 1e-5)
        return vec4(-1);
    float t = dot(n, v0 - r.o) / nd;

    vec3 p = r.o+t*r.d;
    vec3 bc = bary(v0, v1, v2, p);

    return vec4(bc, t);
}

void main() {
    ivec2 pixCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 outputSize = imageSize(Output);

    Ray r;
    r.o = vec3(vec2(pixCoord) / outputSize, 0.0);
    r.d = vec3(0, 0, 1);
    vec4 bc = intersect(vec3(0.25, 0.75, 0.5), vec3(0.5, 0.25, 1.0), vec3(0.75, 0.75, 0.5), r);

    float w = float(all(greaterThanEqual(bc, vec4(0.0))));

    imageStore(Output, pixCoord, vec4(w*bc.xyz, pix_value.a));
}