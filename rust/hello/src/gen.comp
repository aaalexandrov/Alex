#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, std140) uniform Data {
    mat4 view_proj;
    vec4 pix_value;
    uint num_tri_indices;
    uint num_vertices;
};

layout(set = 0, binding = 1, rgba8) uniform image2D Output;

layout(set = 0, binding = 2, std430) buffer Vertices {
    float vert[];
};

layout(set = 0, binding = 3, std430) buffer TriIndices {
    uint tri_indices[];
};

struct Ray {
    vec3 o;
    vec3 d;
};

vec3 bary(vec3 v0, vec3 v1, vec3 v2, vec3 p) {
    vec3 e1 = v1 - v0;
    vec3 e2 = v2 - v0;
    vec3 p0 = p - v0;

    float e1proje2 = dot(e1, e2) / dot(e2, e2); 
    vec3 e1o = e1 - e1proje2 * e2;

    float t1o = dot(p0, e1o) / dot(e1o, e1o);
    float t2 = dot(p0, e2) / dot(e2, e2);

    float c1 = t1o;
    float c2 = t2 - t1o*e1proje2;

    vec3 bc = vec3(1 - c1 - c2, c1, c2);
    return bc;
}

vec4 intersect(vec3 v0, vec3 v1, vec3 v2, Ray r) {
    vec3 e1 = v1 - v0;
    vec3 e2 = v2 - v0;
    vec3 n = cross(e1, e2);
    float nd = dot(n, r.d);
    if (abs(nd) < 1e-5)
        return vec4(-1);
    float t = dot(n, v0 - r.o) / nd;

    vec3 p = r.o+t*r.d;
    vec3 bc = bary(v0, v1, v2, p);

    return vec4(bc, t);
}

void main() {
    ivec2 pixCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 outputSize = imageSize(Output);

    vec2 pix = vec2(pixCoord) / outputSize * 2 - 1;

    vec4 o = view_proj * vec4(pix, 0, 1);
    vec4 p = view_proj * vec4(pix, 0.5, 1);
    o /= o.w;
    p /= p.w;

    Ray r;
    r.o = o.xyz;
    r.d = normalize((p - o).xyz);

    vec4 bc = vec4(-1, -1, -1, 1e30);
    
    for (uint i = 0; i < num_tri_indices; i += 3) {
        vec3 v0 = vec3(
            vert[tri_indices[i + 0] * 3 + 0],
            vert[tri_indices[i + 0] * 3 + 1],
            vert[tri_indices[i + 0] * 3 + 2]);

        vec3 v1 = vec3(
            vert[tri_indices[i + 1] * 3 + 0],
            vert[tri_indices[i + 1] * 3 + 1],
            vert[tri_indices[i + 1] * 3 + 2]);

        vec3 v2 = vec3(
            vert[tri_indices[i + 2] * 3 + 0],
            vert[tri_indices[i + 2] * 3 + 1],
            vert[tri_indices[i + 2] * 3 + 2]);

        vec4 bc_tri = intersect(v0, v1, v2, r);
        if (all(greaterThanEqual(bc_tri, vec4(0.0))) && bc_tri.w < bc.w) {
            bc = bc_tri;
        }
    }

    float w = float(all(greaterThanEqual(bc, vec4(0.0))));

    imageStore(Output, pixCoord, vec4(w*bc.xyz, pix_value.a));
}